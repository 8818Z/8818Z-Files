{"mode":"Text","textContent":"from vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain = Brain()\n\nfrom vex import *\n\n# locking\nlocktimer = 100\nMAXIMUIMTIMER = 100\nlocked = False\ninputs = False\n\n# define eletronics\nbrain = Brain()\ncontroller = Controller()\nRight_Drive = Motor(Ports.PORT6,1.5,True)\nLeft_Drive = Motor(Ports.PORT1,1.5,True)\nInternal = Inertial()\ndrivebase = SmartDrive(Left_Drive, Right_Drive, Internal, 200)\ndumperRight = Motor(Ports.PORT2,1,False)\ndumperLeft = Motor(Ports.PORT3,1,True)\ndumper = MotorGroup(dumperLeft,dumperRight)\nintake = Motor(Ports.PORT4,1,False)\nRstop = False\nLstop = False\nslow = False\nsensitivity = 4\n\n#controllerCode\ndef controllerloop():\n    global Rstop, Lstop, Right_Drive, Left_Drive, controller, brain, inputs, locked\n    while True:\n        driveleftspeed = controller.axisC.position() - controller.axisA.position()\n        driverightspeed = controller.axisC.position() + controller.axisA.position() \n        \n        if driveleftspeed < sensitivity and driveleftspeed > -sensitivity:\n            if Lstop:\n                inputs = True\n                Left_Drive.stop()\n                Lstop = False\n        else:\n            Lstop = True\n        if driverightspeed < sensitivity and driverightspeed > -sensitivity:\n            if Rstop:\n                inputs = True\n                Right_Drive.stop()\n                Rstop = False\n        else:\n            Rstop = True\n\n        if Lstop and not locked:\n            inputs = True\n            Left_Drive.set_velocity(driveleftspeed,PERCENT)\n            Left_Drive.set_max_torque(100,PERCENT)\n            Left_Drive.spin(FORWARD)\n        if Rstop and not locked:\n            inputs = True\n            Right_Drive.set_velocity(driverightspeed,PERCENT)\n            Left_Drive.set_max_torque(100,PERCENT)\n            Right_Drive.spin(FORWARD)\n        wait(20,MSEC)\n\n\ndef ticktimer():\n    global locktimer, MAXIMUMTIMER, locked, inputs\n    while True:\n        if locked == False:\n            locktimer -= 1\n            if inputs == True:\n                locktimer = MAXIMUIMTIMER\n                inputs = False\n            else:\n                if locktimer == 0:\n                        locked = True\n            \n        else:\n            break\n        wait(1,SECONDS)\n\nThread(ticktimer)\nThread(controllerloop)\nintakeactive = False\ndumper.set_velocity(60,PERCENT)\nintake.set_velocity(85,PERCENT)\nintake.set_max_torque(100,PERCENT)\ndef toggleintake():\n    global locked\n    if not locked:\n        wait(1,MSEC)\n        global intakeactive, inputs\n        inputs = True\n        if intakeactive:\n            intakeactive = False\n            intake.spin(FORWARD)\n        else:\n            intakeactive = True\n            intake.spin(REVERSE)\n    \n\ndef dumperup():\n    global locked\n    if not locked:\n        wait(1,MSEC)\n        global inputs, intakeactive\n        inputs = True\n        dumper.spin(FORWARD)\n        wait(2,SECONDS)\n        intake.stop()\n        intakeactive = False\n\ndef dumperdown():\n    global locked,inputs, intakeactive\n    if not locked:\n        inputs = True\n        dumper.spin(REVERSE)\n        wait(2,SECONDS)\n        intake.stop()\n        intakeactive = False\n\ndef dumperstop():\n    global locked, inputs\n    if not locked:\n        wait(1,MSEC)\n        inputs = True\n        dumper.stop()\ndef intakestop():\n    global locked, inputs, intakeactive\n    if not locked:\n        wait(1,MSEC)\n        inputs = True\n        intake.stop()\n        intakeactive = False\n\ndef slowmode():\n    wait(1,MSEC)\n    global inputs, ssensitivity, slow\n    inputs = True\n    if slow == False:\n        slow = True\n        sensitivity = 20\n    else:\n        slow = False\n        sensitivity = 4\n\n\ndef debugscreen():\n    while True:\n        global locktimer\n        brain.screen.set_cursor(1,1)\n        brain.screen.print(\"Turn \" + str(controller.axisC.position()))\n        brain.screen.set_cursor(2,1)\n        brain.screen.print(\"Forward \" + str(controller.axisA.position()))\n        brain.screen.set_cursor(3,1)\n        brain.screen.print(\"Timer \" + str(locktimer))\n        brain.screen.set_cursor(4,1)\n        brain.screen.print(\"dumperdown \" + str(controller.buttonLUp.pressing()))\n        brain.screen.set_cursor(5,1)\n        brain.screen.print(\"dumpertup \" + str(controller.buttonLDown.pressing()))\n        wait(180,MSEC)\n        brain.screen.clear_screen()\nThread(debugscreen)\ndumper.set_max_torque(100,PERCENT)\ndumper.set_position(0,DEGREES)\ndumper.set_stopping(HOLD)\ncontroller.buttonFUp.pressed(slowmode)\ncontroller.buttonRUp.pressed(toggleintake)\ncontroller.buttonLUp.pressed(dumperup)\ncontroller.buttonLDown.pressed(dumperdown)\ncontroller.buttonRDown.pressed(intakestop)\ncontroller.buttonLUp.released(dumperstop)\ncontroller.buttonLDown.released(dumperstop)\nbrain.screen.set_font(FontType.MONO12)","textLanguage":"python","rconfig":[],"slot":0,"platform":"IQ","sdkVersion":"20230627.09.00.00","appVersion":"3.0.0","minVersion":"3.0.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"Second","v5SoundsEnabled":false,"target":"Physical"}